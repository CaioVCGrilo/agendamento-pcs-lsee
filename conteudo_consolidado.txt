================================================================================
Caminho do arquivo: api\agendamentos.js
================================================================================

import { NextResponse } from 'next/server';
import mysql from 'mysql2/promise';
const crypto = require('crypto');

const pool = mysql.createPool({
    host: process.env.MYSQL_HOST,
    user: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
});

const LSEE_EXCEPTION_IP = '143.107.235.10';

async function autoDeleteOldReservations() {
    console.log("Executando limpeza de agendamentos antigos...");
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayISO = yesterday.toISOString().split('T')[0];
    const deleteQuery = `
        DELETE FROM agendamentos
        WHERE DATE_ADD(data_inicio, INTERVAL dias_necessarios - 1 DAY) < ?;
    `;

    try {
        const [result] = await pool.execute(deleteQuery, [yesterdayISO]);
        console.log(`Limpeza concluída. ${result.affectedRows} agendamento(s) antigo(s) excluído(s).`);
    } catch (error) {
        console.error("ERRO: Falha ao executar a limpeza de agendamentos antigos.", error);
    }
}

async function initializeDatabase() {
    console.log("Tentando inicializar o banco de dados e criar a tabela 'agendamentos'...");
    const createTableQuery = `
        CREATE TABLE IF NOT EXISTS agendamentos (
            id INT AUTO_INCREMENT PRIMARY KEY,
            data_inicio DATE NOT NULL,
            dias_necessarios INT NOT NULL,
            pc_numero VARCHAR(50) NOT NULL,
            agendado_por VARCHAR(100) NOT NULL,
            pin VARCHAR(32) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    `;

    try {
        await pool.execute(createTableQuery);
        console.log("Tabela 'agendamentos' verificada/criada com sucesso.");
    } catch (error) {
        console.error("ERRO CRÍTICO: Falha ao inicializar a tabela agendamentos.", error);
    }
}

initializeDatabase();
//autoDeleteOldReservations();

function checkDbConnection() {
    if (!process.env.MYSQL_HOST) {
        return NextResponse.json(
            { error: 'Serviço indisponível. Variáveis de ambiente do MySQL não configuradas.' },
            { status: 503 }
        );
    }
    return null;
}

const TODOS_PCS = ['PC 082', 'PC 083', 'PC 094', 'PC 095'];

export async function GET_DISPONIVEIS(request) {
    const connectionError = checkDbConnection();
    if (connectionError) return connectionError;

    try {
        const { searchParams } = new URL(request.url);
        const dataInicio = searchParams.get('dataInicial');
        const diasNecessarios = parseInt(searchParams.get('diasNecessarios'), 10);

        if (!dataInicio || !diasNecessarios || diasNecessarios < 1) {
            return NextResponse.json(TODOS_PCS, { status: 200 });
        }

        const dataFimReserva = new Date(dataInicio);
        dataFimReserva.setDate(dataFimReserva.getDate() + diasNecessarios - 1);
        const dataFimISO = dataFimReserva.toISOString().split('T')[0];

        const occupiedQuery = `
            SELECT DISTINCT pc_numero
            FROM agendamentos
            WHERE
                data_inicio <= ? AND DATE_ADD(data_inicio, INTERVAL dias_necessarios - 1 DAY) >= ?;
        `;

        const [occupiedResult] = await pool.execute(occupiedQuery, [dataFimISO, dataInicio]);
        const occupiedPcs = occupiedResult.map(row => row.pc_numero);
        const availablePcs = TODOS_PCS.filter(pc => !occupiedPcs.includes(pc));

        return NextResponse.json(availablePcs, { status: 200 });

    } catch (error) {
        console.error('Erro ao buscar PCs disponíveis (GET_DISPONIVEIS):', error);
        return NextResponse.json({ error: 'Erro ao verificar disponibilidade. Cheque a conexão com o DB.' }, { status: 503 });
    }
}

export async function POST(request) {
    const connectionError = checkDbConnection();
    if (connectionError) return connectionError;

    try {
        const { dataInicial, diasNecessarios, pc, nome, pin, codigo_lsee } = await request.json();

        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const requestDate = new Date(dataInicial + 'T00:00:00');
        requestDate.setHours(0, 0, 0, 0);

        if (requestDate < today) {
            return NextResponse.json(
                { error: 'Não é possível agendar para uma data que já passou.' },
                { status: 400 }
            );
        }

        const clientIP = request.headers.get('x-forwarded-for') || request.ip;
        const lseeCode = process.env.LSEE_CODE;
        let isPinRequired = true;

        if (clientIP === LSEE_EXCEPTION_IP) {
            console.log(`Reserva via IP autorizado (${clientIP}). O PIN não será validado.`);
            isPinRequired = false;
        } else {
            console.log(`Reserva via IP autorizado (${clientIP}). O PIN não será validado.`);
            isPinRequired = false;
        }

        const dataInicio = dataInicial;
        const dias = parseInt(diasNecessarios, 10);

        if (!dataInicio || !dias || !pc || !nome || (isPinRequired && !pin)) {
            return NextResponse.json({ error: 'Dados incompletos. Todos os campos são obrigatórios.' }, { status: 400 });
        }

        const dataFimReserva = new Date(dataInicio);
        dataFimReserva.setDate(dataFimReserva.getDate() + dias - 1);
        const dataFimISO = dataFimReserva.toISOString().split('T')[0];

        const conflictQuery = `
            SELECT id, data_inicio, dias_necessarios, agendado_por
            FROM agendamentos
            WHERE pc_numero = ?
              AND data_inicio <= ? AND DATE_ADD(data_inicio, INTERVAL dias_necessarios - 1 DAY) >= ?
                LIMIT 1;
        `;

        const [conflicts] = await pool.execute(conflictQuery, [pc, dataFimISO, dataInicio]);

        if (conflicts.length > 0) {
            const conflito = conflicts[0];
            const dataFimConflito = new Date(conflito.data_inicio);
            dataFimConflito.setDate(dataFimConflito.getDate() + conflito.dias_necessarios);

            return NextResponse.json({
                error: 'CONFLITO DE AGENDAMENTO',
                message: `O PC ${pc} já está reservado durante este período.`,
                conflito: {
                    agendado_por: conflito.agendado_por,
                    data_inicio: conflito.data_inicio,
                    dias_necessarios: conflito.dias_necessarios
                }
            }, { status: 409 });
        }

        let hashedPin = '';
        if (isPinRequired) {
            hashedPin = crypto.createHash('md5').update(pin).digest('hex');
        } else {
            hashedPin = crypto.createHash('md5').update(pin).digest('hex');
        }

        const insertQuery = `
            INSERT INTO agendamentos (
                data_inicio,
                dias_necessarios,
                pc_numero,
                agendado_por,
                pin
            ) VALUES (?, ?, ?, ?, ?);
        `;

        const [result] = await pool.execute(insertQuery, [dataInicial, dias, pc, nome, hashedPin]);

        return NextResponse.json({
            message: 'Agendamento criado com sucesso!',
            id: result.insertId
        }, { status: 201 });

    } catch (error) {
        console.error('Erro ao processar agendamento (POST):', error);
        return NextResponse.json({ error: 'Erro de infraestrutura ao salvar o agendamento.' }, { status: 503 });
    }
}

export async function GET_ALL_AGENDAMENTOS() {
    const connectionError = checkDbConnection();
    if (connectionError) return connectionError;

    try {
        const today = new Date().toISOString().split('T')[0];

        const [agendamentos] = await pool.execute(
            `SELECT
                 id,
                 DATE_FORMAT(data_inicio, '%Y-%m-%d') AS data_inicio,
                 dias_necessarios,
                 pc_numero,
                 agendado_por
             FROM agendamentos
             WHERE DATE_ADD(data_inicio, INTERVAL dias_necessarios - 0 DAY) >= ?
             ORDER BY data_inicio ASC;`,
            [today]
        );

        return NextResponse.json(agendamentos, { status: 200 });

    } catch (error) {
        console.error('Erro ao buscar agendamentos (GET):', error);
        return NextResponse.json({ error: 'Erro de infraestrutura ao carregar a lista de agendamentos.' }, { status: 503 });
    }
}

export async function DELETE(request) {
    const connectionError = checkDbConnection();
    if (connectionError) return connectionError;

    try {
        const { searchParams } = new URL(request.url);
        const id = searchParams.get('id');
        const { pinDigitado } = await request.json();

        const clientIP = request.headers.get('x-forwarded-for') || request.ip;
        let deleteQuery;
        let queryParams;

        if (!id || !pinDigitado) {
            return NextResponse.json({ error: 'ID e PIN de liberação são obrigatórios.' }, { status: 400 });
        }
        const hashedPinDigitado = crypto.createHash('md5').update(pinDigitado).digest('hex');
        deleteQuery = 'DELETE FROM agendamentos WHERE id = ? AND pin = ?';
        queryParams = [id, hashedPinDigitado];

        const [deleteResult] = await pool.execute(deleteQuery, queryParams);

        if (deleteResult.affectedRows === 0) {
            return NextResponse.json({ error: 'PIN ou ID do agendamento incorreto. Cancelamento não autorizado.' }, { status: 403 });
        }

        return NextResponse.json({ message: 'Agendamento cancelado com sucesso.' }, { status: 200 });

    } catch (error) {
        console.error('Erro ao processar cancelamento (DELETE):', error);
        return NextResponse.json({ error: 'Erro de infraestrutura ao cancelar o agendamento.' }, { status: 503 });
    }
}

export async function GET(request) {
    const { searchParams } = new URL(request.url);
    if (searchParams.has('dataInicial') && searchParams.has('diasNecessarios')) {
        return GET_DISPONIVEIS(request);
    }
    return GET_ALL_AGENDAMENTOS();
}

================================================================================
Caminho do arquivo: public\index.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/LSEE_logo.png" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta
          name="description"
          content="Sistema de gerenciamento de servidores de simulação."
  />
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

  <title>LSEE - Agendamentos</title>

</head>
<body>
<noscript>You need to enable JavaScript to run this app.</noscript>
<div id="root"></div>
</body>
</html>

================================================================================
Caminho do arquivo: src\App.css
================================================================================

/* src/App.css */

/* Fonte */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700;800&display=swap');

.footer {
    text-align: center;
    padding: 0 0;
    color: #6b7280; /* cinza médio */
    font-size: 0.875rem; /* 14px */
}

/* Estilos globais e de corpo */
.app-container {
    background-color: #f3f4f6; /* cinza claro */
    min-height: 100vh;
    padding: 2rem;
    font-family: 'Inter', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/* Container principal (o "card" branco) */
.main-card {
    background-color: white;
    border-radius: 1rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    overflow: hidden;
    max-width: 80rem; /* 1280px */
    margin: auto;
}

/* Estilos para o Cabeçalho */
.header {
    background-color: white;
    padding: 1.5rem 2.5rem;
    border-bottom: 2px solid #e5e7eb;
}

.header-logo-container {
    display: flex;
    align-items: center;
    gap: 1.5rem;
}

.header-logo-container svg {
    color: #1f3a8a;
    width: 3rem;
    height: 3rem;
    flex-shrink: 0;
}

.header-title {
    font-size: 1.75rem;
    font-weight: 800;
    color: #1f3a8a;
    margin: 0;
}

.header-subtitle {
    font-size: 1rem;
    color: #4b5563;
    margin: 0;
}

/* Formulário e Lista (conteúdo interno) */
.content-section {
    padding: 2rem;
}

.section-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #1f2937;
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 0.5rem;
}

/* Tabela */
.table-container {
    overflow-x: auto;
    max-width: 100%; /* Corrigido para ocupar toda a largura disponível */
}

.agendamentos-table {
    width: 100%;
    background-color: white;
    border-collapse: collapse;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.agendamentos-table thead {
    background-color: #f9fafb;
}

.agendamentos-table th {
    padding: 0.75rem 1.5rem;
    text-align: left;
    color: #4b5563;
    font-size: 0.875rem;
    text-transform: uppercase;
    font-weight: 600;
    line-height: 1.5;
    border-bottom: 1px solid #e5e7eb;
}

.agendamentos-table tbody {
    font-size: 0.875rem;
    color: #374151;
}

.agendamentos-table td {
    padding: 0.75rem 1.5rem;
    border-bottom: 1px solid #e5e7eb;
    white-space: nowrap;
}

.agendamentos-table tr:hover {
    background-color: #f3f4f6;
    transition: background-color 0.15s ease-in-out;
}

/* Estilo das tags de PC */
.pc-tag {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
}

.pc-tag.blue {
    background-color: #dbeafe;
    color: #1e40af;
}

.pc-tag.purple {
    background-color: #ede9fe;
    color: #6d28d9;
}

.pc-tag.green {
    background-color: #d1fae5;
    color: #065f46;
}

.pc-tag.orange {
    background-color: #fffbe6;
    color: #a16207;
}

/* Estilo do formulário */
.form-card {
    background-color: white;
    padding: 0.5rem 2.5rem 2.5rem 2.5rem;
    border-radius: 1rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    margin-bottom: 2rem;
}

.form-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-align: left;
    color: #1f3a8a;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 1rem;
}

.form-group-modern {
    margin-bottom: 0.5rem;
}

.form-label-modern {
    display: block;
    color: #4b5563;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.form-input-wrapper {
    position: relative;
}

.input-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: #9ca3af;
}

.form-input-modern,
.form-select-modern {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 3rem;
    border-radius: 0.5rem;
    border: 1px solid #d1d5db;
    transition: all 0.2s ease-in-out;
    outline: none;
    box-sizing: border-box;
}

.form-input-modern:focus,
.form-select-modern:focus {
    border-color: #2563eb;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.25);
}

.form-button-modern {
    width: 100%;
    background-image: linear-gradient(to right, #2563eb, #1e40af);
    color: white;
    font-weight: 700;
    padding: 1rem;
    border-radius: 0.5rem;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.form-button-modern:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 10px -1px rgba(0, 0, 0, 0.15), 0 3px 6px -1px rgba(0, 0, 0, 0.08);
}

.cancel-button {
    background-color: #ef4444;
    color: white;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
}

.cancel-button:hover {
    background-color: #dc2626;
}

/* --- */

/* Responsividade: Dispositivos Móveis (Retrato) */
@media (max-width: 640px) and (orientation: portrait) {
    .app-container {
        padding: 1rem;
    }
    .main-card {
        box-shadow: none;
    }
    .header {
        padding: 1rem;
        flex-direction: column;
        text-align: center;
        gap: 0.5rem;
    }
    .header-logo-container {
        margin-bottom: 0.5rem;
        flex-direction: column;
        gap: 0.25rem;
    }
    .header-logo-container svg {
        width: 2.5rem;
        height: 2.5rem;
    }
    .header-title {
        font-size: 1.5rem;
    }
    .header-subtitle {
        font-size: 0.75rem;
        text-align: center;
    }
    .content-section {
        padding: 1rem;
    }
    .form-card {
        padding: 1.5rem;
        box-shadow: none;
        border-radius: 0;
    }
    .form-title {
        text-align: center;
        padding-bottom: 0.75rem;
    }
    .form-input-modern,
    .form-select-modern {
        padding: 0.75rem 1rem 0.75rem 2.5rem;
    }
    .input-icon {
        left: 0.75rem;
        width: 1rem;
        height: 1rem;
    }
    .agendamentos-table thead {
        display: none;
    }
    .agendamentos-table,
    .agendamentos-table tbody,
    .agendamentos-table tr,
    .agendamentos-table td {
        display: block;
        width: 100%;
    }
    .agendamentos-table tr {
        margin-bottom: 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .agendamentos-table td {
        text-align: left;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #e5e7eb;
        white-space: normal;
        position: relative;
    }
    .agendamentos-table td:last-child {
        border-bottom: none;
        padding-bottom: 1rem;
    }
    .agendamentos-table td::before {
        content: attr(data-label);
        font-weight: 600;
        text-transform: uppercase;
        color: #6b7280;
        display: block;
        margin-bottom: 0.25rem;
        font-size: 0.75rem;
    }
    .cancel-button {
        width: 100%;
        margin-top: 0.5rem;
    }
}

/* Responsividade: Dispositivos Móveis (Paisagem) */
@media (max-width: 900px) and (orientation: landscape) {
    .app-container {
        padding: 1rem;
    }
    .main-card {
        max-width: 100%;
        margin: 0;
    }
    .header {
        padding: 1rem 1.5rem;
    }
    .header-title {
        font-size: 1.25rem;
    }
    .header-subtitle {
        font-size: 0.875rem;
    }
    .content-section {
        padding: 1rem;
    }
    .agendamentos-table {
        font-size: 0.75rem;
    }
    .agendamentos-table th,
    .agendamentos-table td {
        padding: 0.5rem 1rem;
    }
}

================================================================================
Caminho do arquivo: src\App.tsx
================================================================================

import React from 'react';
import HomePage from './HomePage';
import './App.css';

function App() {
    return (
        <div className="App">
            <HomePage />
        </div>
    );
}

export default App;

================================================================================
Caminho do arquivo: src\HomePage.tsx
================================================================================

'use client';

import React, { useEffect, useState } from 'react';
import FormularioAgendamento from './components/FormularioAgendamento';
import './App.css';

// Utility function to calculate the end date
const calcularDataTermino = (dataInicioStr: string, diasNecessarios: number): Date => {
    // 1. Convert the YYYY-MM-DD string to a Date object
    const data = new Date(dataInicioStr + 'T00:00:00');
    data.setDate(data.getDate() + (diasNecessarios - 1));
    return data;
};

interface Agendamento {
    id: number;
    data_inicio: string;
    dias_necessarios: number;
    pc_numero: string;
    agendado_por: string;
}

export default function HomePage() {
    const [agendamentos, setAgendamentos] = useState<Agendamento[]>([]);
    const [loading, setLoading] = useState(true);

    const fetchAgendamentos = async () => {
        setLoading(true);
        try {
            const response = await fetch('/api/agendamentos');
            if (response.ok) {
                const data = await response.json();
                setAgendamentos(data);
            }
        } catch (error) {
            console.error("Erro ao carregar agendamentos:", error);
        } finally {
            setLoading(false);
        }
    };

    const handleCancelamento = async (id: number) => {
        const pinDigitado = prompt("Para cancelar, digite o PIN de liberação:");

        if (!pinDigitado) {
            alert("Operação cancelada.");
            return;
        }

        try {
            const response = await fetch(`/api/agendamentos?id=${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ pinDigitado }),
            });

            const result = await response.json();

            if (response.ok) {
                alert(`Agendamento ${id} cancelado com sucesso!`);
                fetchAgendamentos();
            } else if (response.status === 403 || response.status === 404) {
                alert(`Falha no Cancelamento: ${result.error || 'PIN ou ID incorreto.'}`);
            } else {
                alert(`Erro ao cancelar: ${result.error || 'Erro desconhecido.'}`);
            }

        } catch (error) {
            console.error("Erro na requisição DELETE:", error);
            alert("Erro de conexão com o servidor ao tentar cancelar.");
        }
    };

    useEffect(() => {
        fetchAgendamentos();
    }, []);

    // Get the current year dynamically for the copyright notice
    const currentYear = new Date().getFullYear();

    // Lógica para filtrar agendamentos expirados
    const hoje = new Date();
    hoje.setHours(0, 0, 0, 0); // Zera o horário para a comparação ser somente por data

    const agendamentosValidos = agendamentos.filter(agendamento => {
        const dataTermino = calcularDataTermino(agendamento.data_inicio, agendamento.dias_necessarios);
        return dataTermino >= hoje;
    });

    return (
        <main className="app-container">
            <div className="main-card">
                <header className="header">
                    <div className="header-logo-container">
                        <div>
                            <h1 className="header-title">Agendamento de Servidores</h1>
                            <p className="header-subtitle">Laboratório de Sistemas de Energia Elétrica</p>
                        </div>
                    </div>
                </header>
                <div className="content-section">
                    <FormularioAgendamento onAgendamentoSucesso={fetchAgendamentos} />

                    <h2 className="section-title">Agendamentos Existentes</h2>

                    {loading ? (
                        <p>Carregando agendamentos...</p>
                    ) : (
                        <div className="table-container">
                            <table className="agendamentos-table">
                                <thead>
                                <tr>
                                    <th>Início</th> {/* Simplificado */}
                                    <th>Término</th> {/* Novo título */}
                                    <th>Nº PC</th>
                                    <th>Agendado por</th>
                                    <th>Ação</th>
                                </tr>
                                </thead>
                                <tbody>
                                {agendamentosValidos.map((agendamento) => {
                                    // Formata a data de início para exibição
                                    const dataInicioFormatada = agendamento.data_inicio ? new Date(agendamento.data_inicio + 'T00:00:00').toLocaleDateString('pt-BR', {timeZone: 'UTC'}) : '';

                                    // Calcula a data de término para exibição
                                    const dataTermino = calcularDataTermino(agendamento.data_inicio, agendamento.dias_necessarios);
                                    const dataTerminoFormatada = dataTermino.toLocaleDateString('pt-BR', {timeZone: 'UTC'});

                                    return (
                                        <tr key={agendamento.id}>
                                            <td data-label="Início">{dataInicioFormatada}</td>
                                            <td data-label="Término">{dataTerminoFormatada}</td>
                                            <td data-label="Nº PC">
                                                <span className={`pc-tag ${
                                                    agendamento.pc_numero === 'PC 094' ? 'blue' :
                                                        agendamento.pc_numero === 'PC 082' ? 'orange' :
                                                            agendamento.pc_numero === 'PC 095' ? 'purple' :
                                                                'green'
                                                }`}>
                                                    {agendamento.pc_numero}
                                                </span>
                                            </td>
                                            {/* Corrected the variable name here */}
                                            <td data-label="Agendado por">{agendamento.agendado_por}</td>
                                            <td data-label="Ação">
                                                <button onClick={() => handleCancelamento(agendamento.id)} className="cancel-button">
                                                    Cancelar
                                                </button>
                                            </td>
                                        </tr>
                                    );
                                })}
                                </tbody>
                            </table>
                        </div>
                    )}
                </div>
            </div>
            <footer className="footer">
                <p>&copy; {currentYear} LSEE - Laboratório de Sistemas de Energia Elétrica. Todos os direitos reservados.</p>
            </footer>
        </main>
    );
}

================================================================================
Caminho do arquivo: src\index.tsx
================================================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './App.css';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
);

================================================================================
Caminho do arquivo: src\components\CalendarIcon.tsx
================================================================================

import React from 'react';

export default function CalendarIcon() {
    return (
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16" className="text-4xl mr-4">
            <path d="M4 .5a.5.5 0 0 0-1 0V1H2a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-1V.5a.5.5 0 0 0-1 0V1H4V.5zm-.5 3h9a.5.5 0 0 0 0-1h-9a.5.5 0 0 0 0 1z" />
            <path d="M1 8v7a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8H1zm-1 0a1 1 0 0 0 1-1h14a1 1 0 0 0 1 1H0z" />
        </svg>
    );
}

================================================================================
Caminho do arquivo: src\components\Formulario.css
================================================================================

*,
*::before,
*::after {
    box-sizing: border-box;
}

.form-card {
    background-color: white;
    padding: 0.5rem 2.5rem 2.5rem 2.5rem;
    border-radius: 1rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    margin-bottom: 2rem;
}

.form-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-align: left;
    color: #1f3a8a;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 1rem;
}

.form-group-modern {
    margin-bottom: 0.5rem;
}

.form-label-modern {
    display: block;
    color: #4b5563;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.form-input-wrapper {
    position: relative;
}

.input-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: #9ca3af;
}

.form-input-modern,
.form-select-modern {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 3rem;
    border-radius: 0.5rem;
    border: 1px solid #d1d5db;
    transition: all 0.2s ease-in-out;
    outline: none;
    box-sizing: border-box;
}

.form-input-modern:focus,
.form-select-modern:focus {
    border-color: #2563eb;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.25);
}

.form-button-modern {
    width: 100%;
    background-image: linear-gradient(to right, #2563eb, #1e40af);
    color: white;
    font-weight: 700;
    padding: 1rem;
    border-radius: 0.5rem;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.form-button-modern:hover {
    transform: translateY(-2px);
    box-shadow: 6px 10px 1px rgba(0, 0, 0, 0.15), 0 3px 6px -1px rgba(0, 0, 0, 0.08);
}

/* --- */

/* Responsividade: Dispositivos Móveis (Retrato) */
@media (max-width: 640px) and (orientation: portrait) {
    /* Estilos para o formulário */
    .form-card {
        padding: 1.5rem;
        box-shadow: none;
        border-radius: 0;
    }

    .form-title {
        text-align: center;
        padding-bottom: 0.75rem;
    }

    .form-label-modern {
        display: block;
        color: #4b5563;
        width: 90%;
        margin-bottom: 0.5rem;
    }

    /* Regra corrigida para o campo de data */
    .form-input-modern[type="date"] {
        width: 87%;
        box-sizing: border-box;
        padding: 0.75rem 1rem;
    }

    .input-icon {
        left: 0.75rem;
        width: 1rem;
        height: 1rem;
    }
}

/* Responsividade: Dispositivos Móveis (Paisagem) */
@media (max-width: 900px) and (orientation: landscape) {
    .form-card {
        padding: 1.5rem 2rem;
    }

    .form-title {
        font-size: 1.25rem;
    }

    .form-input-modern,
    .form-select-modern {
        padding: 0.5rem 1rem 0.5rem 2.5rem;
    }

    .form-button-modern {
        padding: 0.75rem;
    }
}

================================================================================
Caminho do arquivo: src\components\FormularioAgendamento.tsx
================================================================================

import path from 'path';
import React, { useState, useEffect } from 'react';
import './Formulario.css';

// Defina a interface para a estrutura de dados da reserva
interface ReservationData {
    dataInicial: string;
    diasNecessarios: string;
    pc: string;
    nome: string;
    pin: string;
    codigo_lsee?: string; // O '?' indica que este campo é opcional
}

// Função para formatar a data de hoje para o formato YYYY-MM-DD
const getTodayDate = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
};

// Lista de todos os PCs no laboratório (MESMA LISTA DO BACKEND)
const TODOS_PCS = ['PC 082', 'PC 083', 'PC 094', 'PC 095'];

interface FormularioAgendamentoProps {
    onAgendamentoSucesso: () => void;
}

export default function FormularioAgendamento({ onAgendamentoSucesso }: FormularioAgendamentoProps) {
    const [dataInicial, setDataInicial] = useState(getTodayDate());
    const [diasNecessarios, setDiasNecessarios] = useState('1');
    const [pc, setPc] = useState('');
    const [nome, setNome] = useState('');
    const [pin, setPin] = useState('');

    const [pcsDisponiveis, setPcsDisponiveis] = useState<string[]>(TODOS_PCS);
    const [loadingDisponibilidade, setLoadingDisponibilidade] = useState(false);

    useEffect(() => {
        const fetchDisponibilidade = async () => {
            if (!dataInicial || diasNecessarios === '0' || !diasNecessarios || parseInt(diasNecessarios) > 15) {
                setPcsDisponiveis(TODOS_PCS);
                return;
            }

            setLoadingDisponibilidade(true);
            try {
                const response = await fetch(`/api/agendamentos?dataInicial=${dataInicial}&diasNecessarios=${diasNecessarios}`);
                if (response.ok) {
                    const availablePcs = await response.json();
                    setPcsDisponiveis(availablePcs);
                    if (pc && !availablePcs.includes(pc)) {
                        setPc('');
                    }
                } else {
                    setPcsDisponiveis(TODOS_PCS);
                    console.error("Falha ao buscar disponibilidade. Usando lista completa como fallback.");
                }
            } catch (error) {
                console.error("Erro de rede ao buscar disponibilidade:", error);
                setPcsDisponiveis(TODOS_PCS);
            } finally {
                setLoadingDisponibilidade(false);
            }
        };

        const timer = setTimeout(() => {
            fetchDisponibilidade();
        }, 500);

        return () => clearTimeout(timer);
    }, [dataInicial, diasNecessarios, pc]);

    const getDisponibilidadeStatus = () => {
        if (loadingDisponibilidade) return ' (Verificando...)';
        if (pcsDisponiveis.length === 0) return ' (Nenhum disponível)';
        if (pcsDisponiveis.length === TODOS_PCS.length) return ' (Todos disponíveis)';
        return ` (${pcsDisponiveis.length} disponíveis)`;
    };

    // Função de envio separada para ser reutilizada, agora com o tipo 'ReservationData'
    const sendReservation = async (data: ReservationData) => {
        const response = await fetch('/api/agendamentos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });
        return response;
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (pcsDisponiveis.length > 0 && !pcsDisponiveis.includes(pc)) {
            alert(`O PC ${pc} não está disponível para este período. Por favor, selecione uma opção válida.`);
            return;
        }

        if (pcsDisponiveis.length === 0) {
            alert(`Nenhum PC disponível para o período selecionado. Por favor, ajuste a data ou os dias.`);
            return;
        }

        const reservationData = { dataInicial, diasNecessarios, pc, nome, pin };

        try {
            const response = await sendReservation(reservationData);

            if (response.status === 401) {
                const codigoLsee = prompt("Você está fora da rede LSEE. Por favor, insira o código de acesso:");
                if (!codigoLsee) {
                    alert("A reserva foi cancelada. O código de acesso é obrigatório.");
                    return;
                }

                const newResponse = await sendReservation({ ...reservationData, codigo_lsee: codigoLsee });
                const newResult = await newResponse.json();

                if (newResponse.ok) {
                    alert('Agendamento criado com sucesso!');
                    onAgendamentoSucesso();
                    setDataInicial(getTodayDate());
                    setDiasNecessarios('1');
                    setPc('');
                    setNome('');
                    setPin('');
                } else {
                    alert(`Erro ao agendar: ${newResult.error || 'Erro desconhecido.'}`);
                }
            } else if (response.ok) {
                alert('Agendamento criado com sucesso!');
                onAgendamentoSucesso();
                setDataInicial(getTodayDate());
                setDiasNecessarios('1');
                setPc('');
                setNome('');
                setPin('');
            } else if (response.status === 409) {
                const result = await response.json();
                const conflito = result.conflito;
                const dataFim = new Date(conflito.data_inicio);
                dataFim.setDate(dataFim.getDate() + conflito.dias_necessarios);
                alert(
                    `❌ Conflito de Agendamento!\n\n` +
                    `${result.message}\n` +
                    `Reservado por: ${conflito.agendado_por}\n` +
                    `Período: ${new Date(conflito.data_inicio).toLocaleDateString('pt-BR')} até ${dataFim.toLocaleDateString('pt-BR')}`
                );
            } else {
                const result = await response.json();
                alert(`Erro ao agendar: ${result.error || 'Erro desconhecido.'}`);
            }
        } catch (error) {
            alert('Erro de conexão com o servidor.');
            console.error('Erro ao enviar formulário:', error);
        }
    };

    return (
        <form onSubmit={handleSubmit} className="form-card">
            <h2 className="form-title">Reservar um Servidor</h2>
            <div className="form-group-modern">
                <label htmlFor="dataInicial" className="form-label-modern">Data inicial</label>
                <div className="form-input-wrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" className="input-icon" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                    </svg>
                    <input
                        type="date"
                        id="dataInicial"
                        value={dataInicial}
                        onChange={(e) => setDataInicial(e.target.value)}
                        className="form-input-modern"
                        min={getTodayDate()} // <--- AQUI ESTÁ A MUDANÇA
                        required
                    />
                </div>
            </div>
            <div className="form-group-modern">
                <label htmlFor="diasNecessarios" className="form-label-modern">Dias necessários</label>
                <div className="form-input-wrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" className="input-icon" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                    </svg>
                    <input
                        type="number"
                        id="diasNecessarios"
                        value={diasNecessarios}
                        onChange={(e) => setDiasNecessarios(e.target.value)}
                        className="form-input-modern"
                        required
                        min="1"
                        max="15"
                    />
                </div>
            </div>
            <div className="form-group-modern">
                <label htmlFor="pc" className="form-label-modern">Número do PC
                    {getDisponibilidadeStatus()}
                </label>
                <div className="form-input-wrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" className="input-icon" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2z"/>
                        <path d="M8 12.5a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H8.5a.5.5 0 0 1-.5-.5z"/>
                    </svg>
                    <select
                        id="pc"
                        value={pc}
                        onChange={(e) => setPc(e.target.value)}
                        className="form-input-modern"
                        required
                        disabled={loadingDisponibilidade || pcsDisponiveis.length === 0}
                    >
                        <option value="">
                            {pcsDisponiveis.length === 0 ? 'NENHUM DISPONÍVEL' : 'Selecione um PC'}
                        </option>
                        {pcsDisponiveis.map(pc => (
                            <option key={pc} value={pc}>{pc}</option>
                        ))}
                    </select>
                </div>
            </div>
            <div className="form-group-modern">
                <label htmlFor="nome" className="form-label-modern">Agendado por</label>
                <div className="form-input-wrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" className="input-icon" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                    </svg>
                    <input
                        type="text"
                        id="nome"
                        value={nome}
                        onChange={(e) => setNome(e.target.value)}
                        className="form-input-modern"
                        required
                    />
                </div>
            </div>
            <div className="form-group-modern">
                <label htmlFor="pin" className="form-label-modern">PIN para cancelar agendamento</label>
                <div className="form-input-wrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" className="input-icon" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M3.5 11.5a.5.5 0 0 1 0-1h9a.5.5 0 0 1 0 1h-9zm-1-3a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-11zm-1-3a.5.5 0 0 1 0-1h13a.5.5 0 0 1 0 1h-13z"/>
                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2zm0-1h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2z"/>
                    </svg>
                    <input
                        type="text"
                        id="pin"
                        value={pin}
                        onChange={(e) => setPin(e.target.value)}
                        className="form-input-modern"
                        required
                    />
                </div>
            </div>
            <button
                type="submit"
                className="form-button-modern"
                disabled={pcsDisponiveis.length === 0 || loadingDisponibilidade}
            >
                {pcsDisponiveis.length === 0 ? 'Nenhum PC Disponível' : 'Confirmar Agendamento'}
            </button>
        </form>
    );
}

